About This Code
================

This Python code demonstrates the Import-Time Singleton pattern. The Import-Time Singleton pattern leverages Python's module-level code execution to ensure a single instance of a class.

Structure:
- import-time-singleton/
    ├── main.py
    └── singleton.py

1. `main.py`: The main script where the Import-Time Singleton pattern is demonstrated.
2. `singleton.py`: A module that contains the `Singleton` class and its implementation.

`singleton.py` - Singleton Implementation:
------------------------------------------
The `singleton.py` module contains the implementation of the Singleton pattern. A single instance of the `Singleton` class is created and shared across the application.

- The `Singleton` class has the following methods:
    - `__init__(self, data=None)`: Initializes the Singleton instance with optional data.
    - `add_data(self, item)`: Sets the data to the provided item.
    - `get_data(self)`: Retrieves the stored data.

`main.py` - Demonstration:
---------------------------
The `main.py` script showcases the Import-Time Singleton pattern using the `singleton.py` module. Here's what it does:

- Imports the `singleton.py` module.
- Accesses the Singleton instance and adds data.
- Attempts to create another instance, which is not allowed.
- Accesses and modifies the data from both instances.

This pattern ensures that there is only one instance of the `Singleton` class, which is shared across the application. Any attempt to create additional instances will result in the use of the existing instance.

You can run `main.py` to see the Import-Time Singleton pattern in action.